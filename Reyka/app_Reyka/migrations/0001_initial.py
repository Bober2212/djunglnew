# Generated by Django 4.2.6 on 2023-12-11 17:24

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Album',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Album', models.CharField(max_length=30)),
                ('Lyrics', models.DateField()),
                ('Duration', models.CharField(max_length=30)),
                ('Rating', models.CharField(max_length=30)),
                ('Notes', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='card_dostup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_issue', models.DateField()),
                ('close_date', models.DateField()),
                ('price', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='class_school',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', models.CharField(max_length=30)),
                ('number_school', models.CharField(max_length=30)),
                ('number_class', models.IntegerField()),
                ('leter_class', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Dg',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('surnmae', models.CharField(max_length=30)),
                ('dateofbirth', models.DateField(max_length=100)),
                ('gmail', models.CharField(max_length=100)),
                ('age', models.IntegerField()),
                ('create_att', models.DateTimeField(auto_now_add=True)),
                ('modified_att', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('studens_group', models.CharField(max_length=30)),
                ('group_number', models.CharField(max_length=30)),
                ('cabinete_fences', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='I',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('surname', models.CharField(max_length=30)),
                ('gmail', models.CharField(max_length=30)),
                ('school', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='library_literatura',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('ganr', models.CharField(max_length=30)),
                ('year', models.IntegerField()),
                ('date_publication', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='Musician',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Name', models.CharField(max_length=30)),
                ('Instrument', models.DateField()),
                ('Genre', models.CharField(max_length=30)),
                ('Birthdate', models.CharField(max_length=30)),
                ('Biography', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='My_school',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gmail_school', models.CharField(max_length=30)),
                ('number_school', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Photo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='app_Reyka/static/images')),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=30)),
                ('level', models.IntegerField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('surname', models.CharField(max_length=30)),
                ('number_studens_card', models.IntegerField()),
                ('gmail', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Project_task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=30)),
                ('create_att', models.DateTimeField(auto_now=True)),
                ('status', models.BooleanField()),
                ('deadline', models.DateField()),
                ('project_task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app_Reyka.project')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='proces_taking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_literature', models.CharField(max_length=30)),
                ('number_studens_card', models.IntegerField()),
                ('date_issue', models.DateField()),
                ('name_surname', models.DateField()),
                ('library', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app_Reyka.library_literatura')),
                ('library_card', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app_Reyka.card_dostup')),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=30)),
                ('create_att', models.DateField()),
                ('dg', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app_Reyka.dg')),
            ],
        ),
        migrations.AddField(
            model_name='card_dostup',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app_Reyka.student'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('avatar', models.ImageField(default='app_Reyka/static/images/default.png', upload_to='app_Reyka/static/images')),
                ('status', models.CharField(max_length=100)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
